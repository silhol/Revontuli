## This python script asks for your location and then sends you a notification when the nothern lights (revontuli)
# might be visible

# Implementation plan and potential sources:
# 1) Finding the right station:
#
# Show user the map and let him click from a radio list the closest station
# This information is stored in a configuration file

# 2) Extracting the figure from https://aurorasnow.fmi.fi/public_service/images/mag_disturb_hour_fi.png
# Check if the chosen city has a red or blue or brown dot in the figure with the map
# https://www.kite.com/python/answers/how-to-find-the-rgb-value-of-a-pixel-in-python
# Alternatively use pilar-graph of that station, find last pilar
# Check if colour in html element of last pilar is NOT 141
# Open CV https://www.youtube.com/watch?v=BR4jGk7oOoE
# This function has to be called every 10 Minutes
# see the old electricity python project for the code and how to set this up in windows

# 3) Notification of user
# Potential choices and approaches
# Step 1: Screen (Tkinker, see recipe python)
# Step 2: email (https://realpython.com/python-send-email/ or
# https://pythoninoffice.com/use-python-to-send-whatsapp-message/ (gmail & whatsapp)
# Step 3: phone? SMS requires account with an SMS provider (costs) - not done
# Whatsapp: https://medium.com/@jihargifari/how-to-send-multiple-whatsapp-message-using-python-3f1f19c5976b
# https://www.geeksforgeeks.org/whatsapp-using-python/

from __future__ import print_function
import pip
import requests
from tkinter import *
#  https://intellij-support.jetbrains.com/hc/en-us/community/posts/360010719620-No-tkinter-in-pycharm
import PIL
from PIL import Image, ImageTk
import shutil
import datetime
import pandas as pd
from bs4 import BeautifulSoup
import cv2
import numpy as np
from google.auth.transport.requests import Request # look in settings for google-auth
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from time import sleep
import os.path
import base64
import urllib
from email.message import EmailMessage


def find_station(list_stations_l):  # input stations, user is asked to identify the one closest station

    # https://www.tutorialsteacher.com/python/create-gui-using-tkinter-python (good tutorial on tkinker for UI)
    data = list_stations_l
    window = Tk()

    f = open('Finland.png', 'wb')  # here we make sure to download the latest version of the map and overwrite
    # the existing Finland.png file this file contains a map with the stations
    f.write(urllib.request.urlopen(
        "https://cdn.fmi.fi/weather-observations/products/magnetic-disturbance-observations/map-fi.png").read())
    f.close()
    fin = Image.open("Finland.png").resize((170, 320))  # .convert("RGB")

    # below works, but no image
    window.tkimage = ImageTk.PhotoImage(fin)
    Label(window, image=window.tkimage).place(x=0, y=0, relwidth=1, relheight=1)
    Label(window, text="Please click the station nearest to you", fg='red', font=("Helvetica", 16)).grid(row=0,
                                                                                                         sticky=W)
    l = len(data)  # length is needed to crate teh right size of box for clicking the right station

    # Creating a list of the stations to click
    i = 0  # counter
    v = []  # list of stations
    c = []  # button list with station names

    for name in data:  # goes through data which is list of stations
        v.append(IntVar())  # extend list for i'th element
        # Create entry for each station
        c.append(Checkbutton(window, text=name, variable=v[i]))  # Creates buttons with station names
        c[i].grid(row=i+2, sticky=W)
        i = i + 1

    def var_states():  # this is for catching the click, a bit of ugly code
        global selected  # a bit of quick and dirty approach
        selected = []
        print("\n")
        for i in range(l):  # next line shows if a recipe has been clicked or not
            # print(data[i] + ": %d " % (v[i].get())) # the v[1].get() fetches the state
            # of the checkbox, 1 if clicked, zero if not and storing the name of the selected station
            if v[i].get() != 0:  # if selected
                selected = data[i]

        window.destroy()
        return selected

    # https://www.python-course.eu/tkinter_checkboxes.php - checkboxes and clicking them tutorial
    Button(window, text='Done', command=var_states, font="ariel 15 bold", bg="black", fg="white").grid(row=l+3,
                                                                                                       sticky=W,
                                                                                                       pady=l+3)
    # This button, if clicked calls the var_states function, which checks what checkbuttons were clicked

    # Window format stuff
    window.title('Station Selection')
    window.geometry("500x400+10+10")
    window.wm_attributes("-topmost", 1)  # puts window on top
    window.mainloop()
    closest_station_l = selected
    return closest_station_l


def config(list_station_names):  # Creates the configuration file with station to watch out for
    # and times when the script should run

    try:
        with open('RevontuliConfiguration.txt', 'x') as f:  # if no file exist, this is executed
            #  print("1")
            print(list_station_names)
            closest_station_l = find_station(list_station_names)
            closest_station_l = closest_station_l + ","

            posti_sender = input("Insert your normal sending e-mail: ")
            posti_sender = posti_sender + ","
            posti_receiver = input("Insert your special aurora notification e-mail: ")
            posti_receiver = posti_receiver + ","

            start_time = input("What time should the observations start? e.g. 18.00 ")
            start_time = start_time + ","
            end_time = input("What time should the observations end? e.g. 07.00 ")
            end_time = end_time + ","

            #  API_key = input("insert your google API key for the e-mail access: ")
            #  API_key = API_key +","
            #  Client_Id_API=input("Insert your google client ID here for the API key: ")

            # lines = Closest_Station_l+posti_sender+posti_receiver+start_time+end_time+API_key+Client_Id_API
            lines = closest_station_l + posti_sender + posti_receiver + start_time + end_time
            f.writelines(lines)  # encoding problem with ä, just renamed the järvi -> jarvi
            configuration_data = lines
    except IOError:
        with open('RevontuliConfiguration.txt', 'r') as f:  # if a file exist, it will be overwritten by this text
            #  print("loop 2")
            closest_station_l = f.readline()
            lines = f.readlines()
            count = 0
            # Strips the newline character
            for lin in lines:
                count += 1
                print("Line{}: {}".format(count, lin.strip()))
            # print(Closest_Station_l)
            configuration_data = closest_station_l
            # f.write('Create a new text file!')
            pass
    return configuration_data


def crop(city):
    f = open('Finland_crop.png', 'wb')  # here we make sure to download the latest version of the map and overwrite
    # the existing Finland.png file
    f.write(urllib.request.urlopen(
        "https://cdn.fmi.fi/weather-observations/products/magnetic-disturbance-observations/map-fi.png").read())
    f.close()
    img = cv2.imread("Finland_crop.png")
    # Resizing the image
    image = cv2.resize(img, (700, 600))

    # dictionary for cropping windows - format city is the key, the value is the list and the order is y,x,h,w
    crop_dict = dict({'Tartu': [500, 200, 200, 250], 'Nurmijarvi': [400, 100, 200, 250],
                      'Hankasalmi': [360, 150, 60, 250], 'Mekrijarvi': [330, 360, 60, 250],
                      'Oulujarvi': [260, 340, 60, 250], 'Ranua': [200, 200, 60, 250],
                      'Pello': [150, 100, 60, 250], 'Sodankyla': [150, 300, 60, 250],
                      'Muonio': [100, 100, 60, 250], 'Ivalo': [90, 300, 60, 250],
                      'Kilpisjarvi': [63, 11, 60, 250], 'Kevo': [50, 300, 60, 250]})

    quadruple = crop_dict.get(city)  # fetch for the given city, the coordinates for cropping the map
    y = quadruple[0]
    x = quadruple[1]
    h = quadruple[2]
    w = quadruple[3]

    #  crop_img is the cropped image around the given city
    crop_img = image[y:y + h, x:x + w].copy()  # 0,0 is in upper left corner of the map, here
    # cv2.imshow("cropped", crop_img) # shows image
    # cv2.waitKey(0)

    file = 'Finland_crop.png'  # png file which contains the cropped image around the given city
    cv2.imwrite(file, crop_img)

    return file


def check_time(config_data_list):
    # code starts
    # time window is populated (start/end) and this goes to configuration file
    # we assume that the first time is somewhere after midday e.g. 14.00 and the second can be any time
    # code wants to call detect_colour function - > this should only be called if in the right time window, if not
    # in right time window, delay of calling this function -> time window check
    # the call should run in a look every 10 min until the end-time is hit and then sleep till next start time
    # detection if positive - > counter is set for each calling of the send_Alert

    now = datetime.datetime.now()
    # print(now)
    year = datetime.date.today().year
    month = datetime.date.today().month
    day = datetime.date.today().day

    start_config_file_time = config_data_list[3]  # format e.g. 14.00
    start_list_from_config = start_config_file_time.split('.')  # list [14,0] those are strings
    start_hour = int(start_list_from_config[0])  # 14 in case
    start_minutes = int(start_list_from_config[1])  # 0 in our case

    end_config_file_time = config_data_list[4]
    end_list_from_config = end_config_file_time.split('.')
    end_hour = int(end_list_from_config[0])
    end_minutes = int(end_list_from_config[1])
    day_s = day  # the day for starting is assumed to be today (now), with every 10 min check the "now" moves forward
    # and will land at the next day after midnight, this case is caught later and the day is increased.

    if start_hour > end_hour and now.hour < 12:  # for example 23.00 and 2.00 and now is "in the small morning hours"
        day_s = day - 1  # this will throw an error for the first day of the month
        print("start day ", day_s)
    start_time = datetime.datetime(year, month, day_s, start_hour, start_minutes)
    day_e = day
    if start_hour > end_hour and now.hour > 12:  # for example 23.00 and 2.00 and now is before midnight
        day_e = day + 1  # here we get an error for the end of the  month!
        print("end day ", day)

    end_time = datetime.datetime(year, month, day_e, end_hour, end_minutes)
    # print(start_time)
    # print(end_time)

    if start_time < now and end_time > now:  # now is in the specified time monitoring time window
        print("time now:", now)  # jumps back to main to then send alert, if colour is red
        print("end_time", end_time
              )
        return True
        # should run in a loop till end_time
    else:  # outside the specified time window
        print("time-from-else loop:", "start time", start_time, "end time", end_time, "now", now)
        start_time = datetime.datetime(year, month, day_s + 1, start_hour, start_minutes)
        sleep_time = start_time - now  # calculates difference to next starting time
        print("Sleep time before", sleep_time.total_seconds())
        sleep(sleep_time.total_seconds()+2)  # sleeps (works in seconds) till this program should continue
        # we gave it two more seconds to avoid that it gets into a weird state
        print("wake up is next step")
        check_time(config_data_list)  # after the sleep the checking should start again
        return True
        # if you want to stop the program you have to stop the python execution
    #  print("The program went here to return false")  # This is only "check" with can be enabled
    return False


def detect_colour(Crop_map):
    # Python program to identify
    # color in images

    # Read the images
    image = cv2.imread(Crop_map)

    # Resizing the image
    # image = cv2.resize(img, (700, 600))

    # Convert Image to Image HSV
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # Defining lower and upper bound HSV blue values
    # The picture on the webpage is not the same as the picture downloaded
    # The web page blue is  102, 204, 238
    # The downloaded picture blue is covered by the values below
    lower_blue = np.array([110, 50, 50])  # =light blue
    upper_blue = np.array([130, 255, 255])  # =dark blue

    # Defining mask for detecting color
    mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)
    output_blue = cv2.bitwise_and(image, image, mask=mask_blue)

    # Defining lower and upper bound HSV red values for downloaded map
    lower_red = np.array([0, 100, 100])  # =light red - red on map is 238, 102, 119
    upper_red = np.array([10, 255, 255])  # =dark red

    # Defining lower and upper bound HSV red values (new 2024 map on web page)
    # Note, the downloaded map has the old values
    # lower_red = np.array([200, 100, 100])  # =light red - red on map is 238, 102, 119
    # upper_red = np.array([250, 150, 150])  # =dark red

    # Green on 2024 map is 204, 187, 168
    # Unclear if this will appear on downloaded map, but here is the code
    lower_green = np.array([200, 170, 150])  # =light green
    upper_green = np.array([220, 255, 255])  # =dark gren

    # Defining mask for detecting red color
    mask_red = cv2.inRange(hsv, lower_red, upper_red)
    output_red = cv2.bitwise_and(image, image, mask=mask_red)
    # print(type(output))
    # print(output)

    mask_green = cv2.inRange(hsv, lower_green, upper_green)
    output_green = cv2.bitwise_and(image, image, mask=mask_green)

    something_to_see = False

    hasBlue = np.sum(mask_blue)
    if hasBlue > 0:
        print('Blue detected!')
        # something_to_see = True  # when you reset the token (token expired)
        # run the program once with the previous line uncommented
        output = output_blue

    hasRed = np.sum(mask_red)
    if hasRed > 0:
        print('Red detected!')
        something_to_see = True  # red dot found at station near you
        output = output_red

    hasGreen = np.sum(mask_green)
    if hasGreen > 0:
        print('Green detected!')
        something_to_see = True  # green dot found at station near you
        output = output_green  # only needed for debugging

    # Display Image and Mask
    # cv2.imshow("Color Detected", np.hstack((image, output)))
    # cv2.waitKey(0)  # Make python sleep for unlimited time
    cv2.destroyAllWindows()

    # if you want to reset the credentials (token.json file and see if it works, delete the comment sign in the next row
    # something_to_see = True
    return something_to_see


def send_alert(SCOPES, configuration_data_list):
    # install google stuff in python (via settings)
    # for the google part below we need some walk through for "normal" users
    # use API https://developers.google.com/gmail/api/quickstart/python for that one needs to create project
    # https://developers.google.com/workspace/guides/create-project
    # left-hand side enable the google workspace APIs
    # Create credentials https://developers.google.com/workspace/guides/create-credentials
    # Oauth credentials:
    # https://developers.google.com/workspace/guides/create-credentials#oauth-client-id
    # sending e-mail https://geekflare.com/send-gmail-in-python/
    # https://developers.google.com/gmail/api/guides/sending#python (creating draft and sending message)

    creds = None
    # get token / credentials right
    # https://developers.google.com/gmail/api/auth/scopes
    # https://www.googleapis.com/auth/gmail.send
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.

    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
        print(creds)

    # If there are no (valid) credentials available, let the user log in.
    # https://www.thepythoncode.com/article/use-gmail-api-in-python
    # https://developers.google.com/gmail/api/quickstart/python

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())  # If this does not work:
            # download from google client_secret_long_random, rename to credenials.json
            # (only needed if you go from scratch again
            # For expired token steps below:
            # delete token.json, run again
            # go to webbrowser to accept the login
            # after that it should run several times, it might be that this has to be done once in a while

        else:   # the client secret file need to be generic below
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open('token.json', 'w') as token:
            token.write(creds.to_json())

    try:
        # Call the Gmail API
        service = build('gmail', 'v1', credentials=creds)

        # message creation
        message = EmailMessage()

        message.set_content('This is automated draft mail')
        #  print(configuration_data_list to check where in the list actually sits what e-mail)
        message['To'] = configuration_data_list[2]  # 'my_revontuli email' replaced by input from configuration
        message['From'] = configuration_data_list[1]  # 'my_private g-email' replaced by input from configuration
        message['Subject'] = 'Look to the sky - test'

        encoded_message = base64.urlsafe_b64encode(message.as_bytes()).decode()

        create_message = {
            'message': {
                'raw': encoded_message
            }
        }
        draft = service.users().drafts().create(userId="me",
                                                body=create_message).execute()

        print(F'Draft id: {draft["id"]}\nDraft message: {draft["message"]}')

        # Below will print out the labels of the inbox, was in example code, we just left it
        # results = service.users().labels().list(userId='me').execute()
        # labels = results.get('labels', [])

        # if not labels:
        #    print('No labels found.')
        #    return
        # print('Labels:')
        # for label in labels:
        #    print(label['name'])

    except HttpError as error:
        # TODO(developer) - Handle errors from gmail API.
        print(f'An error occurred: {error}')
        draft = None

    try:

        # encoded message
        # encoded_message = base64.urlsafe_b64encode(message.as_bytes()).decode()

        create_message = {
            'raw': encoded_message
        }

        send_message = (service.users().messages().send
                        (userId="me", body=create_message).execute())
        print(F'Message Id: {send_message["id"]}')

    except HttpError as error:
        print(F'Another error occurred: {error}')
        send_message = None

    return send_message


def main():
    # Next steps, put configuration into extra function, which is only called, if there is no configuration
    List_Station_Names = ['Tartu', 'Nurmijarvi', 'Hankasalmi', 'Mekrijarvi', 'Oulujarvi', 'Ranua', 'Pello',
                          'Sodankyla', 'Muonio', 'Ivalo', 'Kilpisjarvi', 'Kevo']  # Fixed list of station names

    # The two requests are to make sure that there is no error file not found, the file itself will
    # later be opened and overwritten by the up-to-date map
    urllib.request.urlretrieve(
        "https://cdn.fmi.fi/weather-observations/products/magnetic-disturbance-observations/map-fi.png",
        "Finland.png")
    urllib.request.urlretrieve(
        "https://cdn.fmi.fi/weather-observations/products/magnetic-disturbance-observations/map-fi.png",
        "Finland_crop.png")

    config_data = config(List_Station_Names)  # creates / pulls configuration data (location, e-mails, times)

    config_data_list = config_data.split(",")
    print(config_data_list)
    print('Closest Station: ', config_data_list[0])
    print("Sending e-mail:", config_data_list[1])

    # If modifying these scopes, delete the file token.json.
    SCOPES = ['https://www.googleapis.com/auth/gmail.modify']


    watch_time = check_time(config_data_list)  # this is checking the time and if it should go to sleep or run,
    # if in the right time window, the program continues, else the check_time is in sleep modus

    while watch_time == True:
        Crop_map = crop(config_data_list[0])  # the name of the city is given to the crop function and returns the
        # cropped Finland map
        revontuli_active = detect_colour(Crop_map)  # returns True if there is something to see
        if revontuli_active == True:  # should be True, but for testing I put it to False (there is rarely red)
            send_alert(SCOPES, config_data_list)
        sleep(600)  # fmi page is refreshed every 10 minutes i.e., 600 seconds
        watch_time = check_time(config_data_list)  # if the watch-time is over then this will turn false and the
        #  program ends, meaning that after one night, this turns false and the program ends, but I changed
        #  the check_time and now it sleeps till the next start_time


if __name__ == "__main__":
    main()
